#include <stdio.h>
#include <stdlib.h>

#define NUM_ELEMENTS 118

typedef struct {
    int family;
    int period;
    int atomicNumber;
} Element;

// Função heurística H(x) = H1 + H2
int calculateHeuristic(Element goal, Element current) {
    int H1 = abs((goal.family * goal.period) - (current.family * current.period));
    int H2 = abs(goal.atomicNumber - current.atomicNumber);
    return H1 + H2;
}

// Verificar a admissibilidade da função heurística
int isHeuristicAdmissible(Element goal, Element current, int heuristic) {
    int atomicDifference = abs(goal.atomicNumber - current.atomicNumber);
    int maxHeuristic = (18 * 7) + 117; // Máximo valor possível de H1 + H2

    if (atomicDifference <= heuristic && heuristic <= maxHeuristic) {
        return 1; // Função heurística é admissível
    } else {
        return 0; // Função heurística não é admissível
    }
}

int main() {
    Element elements[NUM_ELEMENTS] = { //valor1 = coluna ; valor2 = linha ; valor3 = numero_atomico 
        {1, 1, 1},   {18, 1, 2},   {1, 2, 3},   {2, 2, 4},   {13, 2, 5},
        {14, 2, 6},  {15, 2, 7},   {16, 2, 8},  {17, 2, 9},  {18, 2, 10},
        {1, 3, 11},  {2, 3, 12},   {13, 3, 13}, {14, 3, 14}, {15, 3, 15},
        {16, 3, 16}, {17, 3, 17},  {18, 3, 18}, {1, 4, 19},  {2, 4, 20},
        {13, 4, 21}, {14, 4, 22},  {15, 4, 23}, {16, 4, 24}, {17, 4, 25},
        {18, 4, 26}, {1, 5, 27},   {2, 5, 28},  {13, 5, 29}, {14, 5, 30},
        {15, 5, 31}, {16, 5, 32},  {17, 5, 33}, {18, 5, 34}, {1, 6, 35},
        {2, 6, 36},  {3, 1, 37},   {4, 1, 38},  {5, 1, 39},  {6, 1, 40},
        {7, 1, 41},  {8, 1, 42},   {9, 1, 43},  {10, 1, 44}, {11, 1, 45},
        {12, 1, 46}, {13, 1, 47},  {14, 1, 48}, {15, 1, 49}, {16, 1, 50},
        {17, 1, 51}, {18, 1, 52},  {1, 2, 53},  {2, 2, 54},  {3, 2, 55},
        {4, 2, 56},  {5, 2, 57},   {6, 2, 58},  {7, 2, 59},  {8, 2, 60},
        {9, 2, 61},  {10, 2, 62},  {11, 2, 63}, {12, 2, 64}, {13, 2, 65},
        {14, 2, 66}, {15, 2, 67},  {16, 2, 68}, {17, 2, 69}, {18, 2, 70},
        {1, 3, 71},  {2, 3, 72},   {3, 3, 73},  {4, 3, 74},  {5, 3, 75},
        {6, 3, 76},  {7, 3, 77},   {8, 3, 78},  {9, 3, 79},  {10, 3, 80},
        {11, 3, 81}, {12, 3, 82},  {13, 3, 83}, {14, 3, 84}, {15, 3, 85},
        {16, 3, 86}, {17, 3, 87},  {18, 3, 88}, {3, 4, 89},  {4, 4, 90},
        {5, 4, 91},  {6, 4, 92},   {7, 4, 93},  {8, 4, 94},  {9, 4, 95},
        {10, 4, 96}, {11, 4, 97},  {12, 4, 98}, {13, 4, 99}, {14, 4, 100},
        {15, 4, 101},{16, 4, 102}, {17, 4, 103},{18, 4, 104},{3, 5, 105},
        {4, 5, 106}, {5, 5, 107},  {6, 5, 108}, {7, 5, 109}, {8, 5, 110},
        {9, 5, 111}, {10, 5, 112}, {11, 5, 113},{12, 5, 114},{13, 5, 115},
        {14, 5, 116},{15, 5, 117},{16, 5, 118}
    };

    Element goal = {2, 3, 5};

    // Verificação da admissibilidade para todos os elementos
    for (int i = 0; i < NUM_ELEMENTS; i++) {
        Element current = elements[i];
        int heuristic = calculateHeuristic(goal, current);
        printf("Element %d - Heuristic: %d\n", i+1, heuristic);

        // Verificar se a função heurística é admissível
        int isAdmissible = isHeuristicAdmissible(goal, current, heuristic);
        if (isAdmissible) {
            printf("Função heurística é admissível para o Elemento %d\n", i+1);
        } else {
            printf("Função heurística não é admissível para o Elemento %d\n", i+1);
        }
    }

    return 0;
}